package it.monitoringpillar.adapter.zabbix.handler;

import it.monitoringpillar.adapter.zabbix.ZabbixConstant;
import it.monitoringpillar.adapter.zabbix.clientbuilder.ZabbixAdapterClientSetter;
import it.monitoringpillar.adapter.zabbix.exception.NotFoundZabbixException;
import it.monitoringpillar.adapter.zabbix.exception.ZabbixException;
import it.monitoringpillar.adapter.zabbix.handler.ZabbixFeatures.ZabbixMethods;
import it.monitoringpillar.config.Configuration;
import it.prisma.domain.dsl.monitoring.InfoType;
import it.prisma.domain.dsl.monitoring.pillar.zabbix.response.ZabbixTemplateResponse;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.inject.Inject;

@Stateless
public class TemplateIDByName implements Serializable {

	private static final long serialVersionUID = 1L;

	@Inject
	private ZabbixAdapterClientSetter<?> zabAdapMetrics;

	@Inject
	private Configuration config;

	public List<String> getTemplateID(String serverType, List<String> service, Boolean activeMode)
			throws ZabbixException {

		ArrayList<ZabbixTemplateResponse> templateList = (ArrayList<ZabbixTemplateResponse>) zabAdapMetrics
				.getTemplateService(serverType, ZabbixMethods.TEMPLATE.getzabbixMethod());

		ArrayList<String> templateIDs = new ArrayList<String>();

		String templateMode = null;
		String templateName = null;
		boolean templateIaaSFoundAndMatchingWithProp = false;
		if (activeMode == null || activeMode == true)
			templateMode = ZabbixConstant.TEMPLATE_RADIX_ACTIVE_MODE;
		else if (activeMode == null && activeMode == false)
			templateMode = ZabbixConstant.TEMPLATE_RADIX_PASSIVE_MODE;

		// FOR EACH TEMPLATE verify whether its name matches with the one passed
		for (int j = 0; j < templateList.size(); j++) {
			templateName = templateList.get(j).getName();
			// If Ceilometer External Script has been used -->
			// ADD IAAS TEMPLATE NO MATTER WHAT.. and check Active mode if set
			if (config.isCeilometerScriptUsed()) {
				if (templateName.equalsIgnoreCase(templateMode + config.TemplateIaaSCeilometerNameinZabbixMetrics())
						&& serverType.equalsIgnoreCase(InfoType.SERVICE.getInfoType())) {
					templateIDs.add(templateList.get(j).getTemplateid());
					templateIaaSFoundAndMatchingWithProp = true;
				}
			}

			// FOR EACH SERVICE PASSED
			for (int z = 0; z < service.size(); z++) {

				if (templateName.equalsIgnoreCase(templateMode + service.get(z))
						|| templateName.equalsIgnoreCase(ZabbixConstant.TEMPLATE_AGGREGATOR)) {
					templateIDs.add(templateList.get(j).getTemplateid());
				}
			}
		}
		if (templateIDs.size() - 1 != service.size() && (serverType.equalsIgnoreCase(InfoType.SERVICE.getInfoType()))) {
			throw new NotFoundZabbixException("Any Service like:" + templateName
					+ "Existing into Monitoring Platform at: " + serverType);
		}

		if (!templateIaaSFoundAndMatchingWithProp && serverType.equalsIgnoreCase(InfoType.SERVICE.getInfoType())) {
			throw new NotFoundZabbixException("The Template IaaS Name does not exist into Monitoring Platform");
		}

		return templateIDs;
	}
}